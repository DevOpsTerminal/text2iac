# docker-compose.yml - Text2IaC Platform Main Orchestration
version: '3.8'

services:
  # =============================================================================
  # REVERSE PROXY (NGINX)
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: text2iac-nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - api
      - frontend
    networks:
      - text2iac-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # =============================================================================
  # MONITORING SERVICES (Optional - use with monitoring profile)
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: text2iac-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - text2iac-network
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: text2iac-grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - text2iac-network
    restart: unless-stopped
    profiles:
      - monitoring

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  text2iac-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# SERVICES
# =============================================================================
services:
  # =============================================================================
  # CORE API SERVICE
  # =============================================================================
  api:
    build: 
      context: ./api
      dockerfile: Dockerfile
    container_name: text2iac-api
    ports:
      - "${API_PORT:-3001}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3000
      - DATABASE_URL=postgresql://${DB_USER:-text2iac}:${DB_PASS:-password}@postgres:5432/${DB_NAME:-text2iac}
      - REDIS_URL=redis://redis:6379
      - OLLAMA_URL=http://ollama:11434
      - OLLAMA_MODEL=${OLLAMA_MODEL:-mistral:7b}
      - JWT_SECRET=${JWT_SECRET:-change-me-in-production}
      - API_KEY=${API_KEY:-dev-api-key}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_started
    volumes:
      - ./templates:/app/templates:ro
      - ./generated:/app/generated
      - ./logs/api:/app/logs
    networks:
      - text2iac-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =============================================================================
  # EMAIL BRIDGE SERVICE
  # =============================================================================
  email-bridge:
    build:
      context: ./email-bridge
      dockerfile: Dockerfile
    container_name: text2iac-email-bridge
    environment:
      - IMAP_HOST=${IMAP_HOST:-}
      - SMTP_HOST=${SMTP_HOST:-}
      - EMAIL_USER=${EMAIL_USER:-infrastructure@company.com}
      - EMAIL_PASS=${EMAIL_PASS:-}
      - TEXT2IAC_API_URL=http://api:3000
      - CHECK_INTERVAL=${EMAIL_CHECK_INTERVAL:-30}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    depends_on:
      - api
    volumes:
      - ./email-bridge/config:/app/config:ro
      - ./logs/email:/app/logs
    networks:
      - text2iac-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/health')"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Only start if email credentials are provided
    profiles:
      - email

  # =============================================================================
  # FRONTEND WEB INTERFACE
  # =============================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: text2iac-frontend
    ports:
      - "${WEB_PORT:-8080}:80"
    environment:
      - API_URL=http://localhost:${API_PORT:-3001}
      - WS_URL=ws://localhost:${API_PORT:-3001}
    depends_on:
      - api
    volumes:
      - ./frontend/config:/usr/share/nginx/html/config:ro
    networks:
      - text2iac-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health.html"]
      interval: 30s
      timeout: 5s
      retries: 3

  # =============================================================================
  # LLM SERVICE (OLLAMA)
  # =============================================================================
  ollama:
    image: ollama/ollama:latest
    container_name: text2iac-ollama
    ports:
      - "${OLLAMA_PORT:-11434}:11434"
    environment:
      - OLLAMA_NUM_PARALLEL=${OLLAMA_PARALLEL:-2}
      - OLLAMA_MAX_LOADED_MODELS=${OLLAMA_MAX_MODELS:-1}
      - OLLAMA_HOST=0.0.0.0
    volumes:
      - ollama_data:/root/.ollama
      - ./config/ollama:/config:ro
    networks:
      - text2iac-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G
    # GPU support (uncomment if NVIDIA GPU available)
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  # =============================================================================
  # DATABASE
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: text2iac-postgres
    ports:
      - "${DB_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${DB_NAME:-text2iac}
      - POSTGRES_USER=${DB_USER:-text2iac}
      - POSTGRES_PASSWORD=${DB_PASS:-password}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./logs/postgres:/var/log
    networks:
      - text2iac-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-text2iac} -d ${DB_NAME:-text2iac}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # REDIS CACHE
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: text2iac-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASS:-}
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - text2iac-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3